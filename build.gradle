plugins {
    alias libs.plugins.quilt.loom
    alias libs.plugins.kotlin
}

archivesBaseName = project.archives_base_name
version = "${project.version}+${libs.versions.minecraft.get()}"
group = project.maven_group

repositories {
    maven {
        url "https://git.gaycatgirl.sex/api/v4/projects/32/packages/maven"
        content { includeGroup "gay.eviee" }
    }

    maven {
        url "https://maven.svc.adryd.com/releases/"
        content { includeGroup "com.adryd" }
    }

    maven {
        url "https://repo.sleeping.town"
        content { includeGroup "com.unascribed" }
    }

    maven {
        url = "https://pkgs.dev.azure.com/djtheredstoner/DevAuth/_packaging/public/maven/v1"
        content { includeGroup "me.djtheredstoner" }
    }

    maven {
        url "https://maven.terraformersmc.com/releases/"
        content { includeGroup "com.terraformersmc" }
    }

    maven {
        url "https://notnite.github.io/blockbuild/mvn/"
        content { includeGroup "pm.n2" }
    }
}

dependencies {
    minecraft libs.minecraft
    mappings variantOf(libs.quilt.mappings) { classifier "intermediary-v2" }

    modImplementation libs.quilt.loader
    modImplementation libs.quilted.fabric.api
    modImplementation libs.quilt.kotlin.libraries

    modApi libs.imgui
    include libs.imgui

    modApi libs.cauldron
    include libs.cauldron

    modApi libs.lib39core
    include libs.lib39core

    modCompileOnly libs.modmenu
    modRuntimeOnly libs.devauth

    modApi libs.hajlib
    include libs.hajlib
}

loom {
    accessWidenerPath = file("src/main/resources/tangerine.accesswidener")
}

tasks.withType(JavaCompile).configureEach {
    it.options.encoding = "UTF-8"
    it.options.release = 17
}

tasks.withType(org.jetbrains.kotlin.gradle.tasks.KotlinCompile).all {
    kotlinOptions {
        jvmTarget = 17
    }
}

java {
    withSourcesJar()
    sourceCompatibility = JavaVersion.VERSION_17
    targetCompatibility = JavaVersion.VERSION_17
}

jar {
    from("LICENSE") {
        rename { "${it}_${archivesBaseName}" }
    }
}

processResources {
    inputs.property "version", version

    filesMatching("quilt.mod.json") {
        expand project.properties
    }
}
